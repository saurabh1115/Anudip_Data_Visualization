Lab 1:
Database Schema:
Consider a simple database with one tables: BankAccount
BankAccount Table:
Columns:
account_id
(Primary
Key),
account_holder_name,
account_balance

mysql> CREATE TABLE BankAccount (
    ->     account_id INT PRIMARY KEY,
    ->     account_holder_name VARCHAR(100),
    ->     account_balance DECIMAL(10, 2)
    -> );
Query OK, 0 rows affected (0.04 sec)

Task 1: Insert Data
Write an SQL INSERT statement to insert data into the BankAccount table.
mysql> INSERT INTO BankAccount (account_id, account_holder_name, account_balance)
    -> VALUES
    ->   (101, 'John Doe', 50000.00),
    ->   (102, 'Jane Smith', 35000.00),
    ->   (103, 'Alice Johnson', 25000.00);
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0


Task 2: Retrieving Data
Write an SQL SELECT statement to retrieve the account_holder_name
and
account_balance of all account holders from the BankAccount table.
mysql> SELECT account_holder_name, account_balance
    -> FROM BankAccount;
+---------------------+-----------------+
| account_holder_name | account_balance |
+---------------------+-----------------+
| John Doe            |        50000.00 |
| Jane Smith          |        35000.00 |
| Alice Johnson       |        25000.00 |
+---------------------+-----------------+
3 rows in set (0.00 sec)

Task 3: Filtering Data
Write an SQL SELECT statement to retrieve the
account_holder_name
and
account_balance
where the account_balance is more than 30,000.

mysql> SELECT account_holder_name, account_balance
    -> FROM BankAccount
    -> WHERE account_balance > 30000;
+---------------------+-----------------+
| account_holder_name | account_balance |
+---------------------+-----------------+
| John Doe            |        50000.00 |
| Jane Smith          |        35000.00 |
+---------------------+-----------------+
2 rows in set (0.01 sec)

Task 4: Updating Data
Write an SQL UPDATE statement to change the account_balance
of the account
holder whose ID is 101.

mysql> UPDATE BankAccount
    -> SET account_balance = 40000.00
    -> WHERE account_id = 101;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

Lab 1-
Database Schema:
Use the same database scheme created in Previous Lab.
Task: Let's consider a scenario where you want to retrieve information about students
from a database table named student and display the results in ascending order based
on their last names.
Hint: Use orderBy clause in a ascending Order

mysql> SELECT *
    -> FROM student
    -> ORDER BY lastname ASC;
+-----------+-----------+----------+-------------+--------+-------------------------+------------+
| StudentID | FirstName | LastName | DateOfBirth | Gender | Email                   | Phone      |
+-----------+-----------+----------+-------------+--------+-------------------------+------------+
|         5 | Chris     | Brown    | 2002-07-25  | M      | chris.brown@example.com | 4443332222 |
|         4 | Emily     | Davis    | 1997-03-10  | F      | emily.davis@example.com | 7778889999 |
|         1 | John      | Doe      | 1995-05-15  | M      | john.doe@example.com    | 1234567890 |
|         3 | Bob       | Johnson  | 2000-11-02  | M      | bob.johnson@example.com | 5551234567 |
|         2 | Alice     | Smith    | 1998-08-20  | F      | alice.smith@example.com | 9876543210 |
+-----------+-----------+----------+-------------+--------+-------------------------+------------+
5 rows in set (0.00 sec)

Lab 2-
Database Schema:
Use the same database scheme created in Previous Lab.
Task: Let's consider a scenario where you want to count the number of students based
on their gender from a database table named Student.
Hint: use GroupBy clause and Count() function

mysql> SELECT Gender, COUNT(*) AS StudentCount
    -> FROM Student
    -> GROUP BY Gender;
+--------+--------------+
| Gender | StudentCount |
+--------+--------------+
| M      |            3 |
| F      |            2 |
+--------+--------------+
2 rows in set (0.01 sec)

Lab 1:
Database Schema
Already we have created an Employee table in day 2 lab,letâ€™s utilize this.
Task: Add two more columns in the Employee table named Salary and department and
add data into it. Now Imagine you work for a company with various departments, and
there is a need to analyze employee salaries within the IT department.Write a query to
retrieve all employees from the "employee" table who have a salary greater than 50000
and are in the 'IT' department
Hint: Use AND operator to retrieve details

mysql> SELECT *
    -> FROM Employee
    -> WHERE salary > 50000 AND department = 'IT';
+--------+----------------+-------------+------+----------------------+-----------+----------+------------+
| emp_id | first_name     | last_name   | age  | email                | job_title | salary   | department |
+--------+----------------+-------------+------+----------------------+-----------+----------+------------+
|      6 | John           | Doe         |   30 | john.doe@example.com | NULL      | 55000.00 | IT         |
|      9 | New Employee 3 | Last Name 3 |   38 | new3@example.com     | NULL      | 70000.00 | IT         |
+--------+----------------+-------------+------+----------------------+-----------+----------+------------+

Lab 2:
Database Schema
Use our database Ecommerce to complete the task.
Task: Imagine you are managing an e-commerce platform, and the holiday season is
approaching. To capitalize on the festive spirit and boost sales, you decide to organize a
special seasonal sale featuring electronics. The goal is to offer discounts on electronics
and include products with a price less than rs. 70,000 in the promotion.Write a query to
find products from the "product" table that are either in the
'Electronics' category or
have a price less than 70000.
Hint: Use Or operator to retrieve product details.

mysql> CREATE TABLE product (
    ->     product_id INT PRIMARY KEY,
    ->     product_name VARCHAR(100),
    ->     category VARCHAR(50),
    ->     price DECIMAL(10, 2)
    -> );
Query OK, 0 rows affected (0.04 sec)

mysql> INSERT INTO product (product_id, product_name, category, price)
    -> VALUES
    ->   (1, 'Laptop', 'Electronics', 55000.00),
    ->   (2, 'Smartphone', 'Electronics', 30000.00),
    ->   (3, 'Watch', 'Accessories', 15000.00),
    ->   (4, 'T-shirt', 'Clothing', 1000.00),
    ->   (5, 'Desk', 'Furniture', 25000.00);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> SELECT *
    -> FROM product
    -> WHERE category = 'Electronics' OR price < 70000;
+------------+--------------+-------------+----------+
| product_id | product_name | category    | price    |
+------------+--------------+-------------+----------+
|          1 | Laptop       | Electronics | 55000.00 |
|          2 | Smartphone   | Electronics | 30000.00 |
|          3 | Watch        | Accessories | 15000.00 |
|          4 | T-shirt      | Clothing    |  1000.00 |
|          5 | Desk         | Furniture   | 25000.00 |
+------------+--------------+-------------+----------+
5 rows in set (0.00 sec)

Lab 3.
Task: Imagine you are an HR analyst responsible for conducting a comprehensive
analysis of average salaries across different departments within a company. The goal is
to understand and compare the average salaries of employees in various
departments.Write a query to Calculate the average salary of employee in each
department from the "employee" table.
Hint: Use AVG() function and GROUP BY clause to create the query.

mysql> SELECT department, AVG(salary) AS average_salary
    -> FROM Employee
    -> GROUP BY department;
+------------+----------------+
| department | average_salary |
+------------+----------------+
| NULL       |   52500.000000 |
| IT         |   62500.000000 |
| Marketing  |   60000.000000 |
| Finance    |   45000.000000 |
| Sales      |   52000.000000 |
+------------+----------------+
5 rows in set (0.01 sec)


Using ChatGPT generates SQL queries of the below problem .
Scenario 1: In an employee database, you want to retrieve information about
employees who belong to the "Sales" department and have a salary greater than
50,000.
Scenario 2: An employee has resigned, and you need to remove their record from the
"employees" table. Write an SQL DELETE query for this.
Scenario 3: You want to delete all orders placed before '2022-01-01' that are still in the
'Pending' status. Write an SQL DELETE query for this.
Scenario 4: You want to remove all products from the "Discontinued" category as they
are no longer available. Write an SQL DELETE query for this.
Scenario 5: Employees in the "Sales" department are getting a bonus, and you want to
add 1000 to the bonus column for all employees in that department. Write an SQL
UPDATE query for this.

mysql> SELECT *
    -> FROM employee
    -> WHERE department = 'Sales' AND salary > 50000;
+--------+----------------+-------------+------+------------------+-----------+----------+------------+
| emp_id | first_name     | last_name   | age  | email            | job_title | salary   | department |
+--------+----------------+-------------+------+------------------+-----------+----------+------------+
|     10 | New Employee 4 | Last Name 4 |   42 | new4@example.com | NULL      | 52000.00 | Sales      |
+--------+----------------+-------------+------+------------------+-----------+----------+------------+
1 row in set (0.00 sec)


mysql> DELETE FROM employee
    -> WHERE emp_id = 8;
Query OK, 1 row affected (0.01 sec)

mysql> UPDATE employee
    -> SET bonus = bonus + 1000
    -> WHERE department = 'Sales';
Query OK, 0 rows affected (0.00 sec)
Rows matched: 1  Changed: 0  Warnings: 0